--- receiver.c.orig	2009-08-25 00:40:09.000000000 +0200
+++ receiver.c	2009-08-25 00:41:02.000000000 +0200
@@ -71,8 +71,8 @@
  *   directory as the given name.  Note that there may be no
  *   directory at all in the given name!
  *
- *   The tmp filename is basically the given filename with a
- *   dot prepended, and .XXXXXX appended (for mkstemp() to
+ *   The tmp filename is basically the given filename with an
+ *   underscore prepended, and .XXXXXX appended (for mkstemp() to
  *   put its unique gunk in).  Take care to not exceed
  *   either the MAXPATHLEN or NAME_MAX, esp. the last, as
  *   the basename basically becomes 8 chars longer. In that
@@ -104,7 +104,7 @@
 		}
 	} else
 		f = fname;
-	fnametmp[length++] = '.';
+	fnametmp[length++] = '_'; /* _ works on NTFS, too */
 
 	/* The maxname value is bufsize, and includes space for the '\0'.
 	 * (Note that NAME_MAX get -8 for the leading '.' above.) */
--- xattrs.c.orig	2009-07-24 04:34:59.000000000 +0200
+++ xattrs.c	2009-08-25 02:24:27.000000000 +0200
@@ -113,6 +113,36 @@
 	return strcmp(xa1->name, xa2->name);
 }
 
+/* KK: system.ntfs_acl, system.ntfs_attrib, system.ntfs_reparse_data are not listed,
+ * but we need them in order to clone NTFS. Just add them to the list. */
+static ssize_t add_ntfs_xattr_names(const char *fname, ssize_t current_list_len){
+	const char *ntfs_xattrs[]= { "system.ntfs_acl",
+	                             "system.ntfs_attrib",
+				     "system.ntfs_reparse_data" };
+	unsigned int i;
+	for (i = 0; i < sizeof(ntfs_xattrs) / sizeof(char*); i++) {
+		/* Check for attribute existence */
+		if (sys_lgetxattr(fname, ntfs_xattrs[i], NULL, 0) >= 0) {
+			int xattr_size = strlen(ntfs_xattrs[i]) + 1;
+			/* Extend namebuf array if necessary */
+			if(current_list_len + xattr_size > namebuf_len){
+				ssize_t new_namebuf_len = namebuf_len + 1024;
+				char *new_namebuf = realloc_array(namebuf, char, new_namebuf_len);
+				if(!new_namebuf) return current_list_len;
+				namebuf = new_namebuf;
+				namebuf_len = new_namebuf_len;
+			}		
+			/* In theory, we should check if the named attribute is already in the list.
+		 	 * but if it was, we would not even need this function, so don't bother
+		 	 * if they are listed twice. */
+	 		/* Copy string including trailing \000 */
+			memcpy(namebuf + current_list_len, ntfs_xattrs[i], xattr_size);
+			current_list_len += xattr_size;
+		}
+	}
+	return current_list_len;
+}
+
 static ssize_t get_xattr_names(const char *fname)
 {
 	ssize_t list_len;
@@ -154,7 +184,8 @@
 			out_of_memory("get_xattr_names");
 	}
 
-	return list_len;
+	/* KK: Add NTFS extended attributes to list. */
+	return add_ntfs_xattr_names(fname, list_len);
 }
 
 /* On entry, the *len_ptr parameter contains the size of the extra space we
@@ -172,6 +203,8 @@
 	if (datum_len == (size_t)-1) {
 		if (errno == ENOTSUP || no_missing_error)
 			return NULL;
+		if (errno == ENODATA) /* Attribute not present, no prob. -KK */
+			return NULL;
 		rsyserr(FERROR_XFER, errno,
 			"get_xattr_data: lgetxattr(\"%s\",\"%s\",0) failed",
 			fname, name);
@@ -225,7 +258,7 @@
 		name_len = strlen(name) + 1;
 		list_len -= name_len;
 
-/* #ifdef HAVE_LINUX_XATTRS */
+#ifdef HAVE_LINUX_XATTRS
 #if 0
 		/* We always ignore the system namespace, and non-root
 		 * ignores everything but the user namespace. */
@@ -233,6 +266,7 @@
 			      : HAS_PREFIX(name, SYSTEM_PREFIX))
 			continue;
 #endif
+#endif
 
 		/* No rsync.%FOO attributes are copied w/o 2 -X options. */
 		if (name_len > RPRE_LEN && name[RPRE_LEN] == '%'
@@ -247,7 +281,7 @@
 
 		datum_len = name_len; /* Pass extra size to get_xattr_data() */
 		if (!(ptr = get_xattr_data(fname, name, &datum_len, 0)))
-			return -1;
+			continue; /* KK: Just ignore nonexistent attributes */
 
 		if (datum_len > MAX_FULL_DATUM) {
 			/* For large datums, we store a flag and a checksum. */
@@ -309,23 +343,24 @@
 		list_len -= name_len;
 
 #ifdef HAVE_LINUX_XATTRS
+#if 0
 		/* We always ignore the system namespace, and non-root
 		 * ignores everything but the user namespace. */
 		if (user_only ? !HAS_PREFIX(name, USER_PREFIX)
 			      : HAS_PREFIX(name, SYSTEM_PREFIX))
 			continue;
 #endif
+#endif
 
 		datum_len = 0;
 		if (!(ptr = get_xattr_data(source, name, &datum_len, 0)))
-			return -1;
+			continue; /* KK: Just ignore nonexistent attributes */
 		if (sys_lsetxattr(dest, name, ptr, datum_len) < 0) {
 			int save_errno = errno ? errno : EINVAL;
 			rsyserr(FERROR_XFER, errno,
-				"rsync_xal_set: lsetxattr(\"%s\",\"%s\") failed",
+				"copy_xattrs: lsetxattr(\"%s\",\"%s\") failed",
 				dest, name);
 			errno = save_errno;
-			return -1;
 		}
 		free(ptr);
 	}
@@ -408,19 +443,23 @@
 				name_len -= RPRE_LEN;
 			}
 #ifndef HAVE_LINUX_XATTRS
+#if 0
 			else {
 				/* Put everything else in the user namespace. */
 				name_len += UPRE_LEN;
 			}
 #endif
+#endif
 			write_varint(f, name_len);
 			write_varint(f, rxa->datum_len);
 #ifndef HAVE_LINUX_XATTRS
+#if 0
 			if (name_len > rxa->name_len) {
 				write_buf(f, USER_PREFIX, UPRE_LEN);
 				name_len -= UPRE_LEN;
 			}
 #endif
+#endif
 			write_buf(f, name, name_len);
 			if (rxa->datum_len > MAX_FULL_DATUM)
 				write_buf(f, rxa->datum + 1, MAX_DIGEST_LEN);
@@ -674,6 +713,7 @@
 			*ptr = XSTATE_ABBREV;
 			read_buf(f, ptr + 1, MAX_DIGEST_LEN);
 		}
+#if 0
 #ifdef HAVE_LINUX_XATTRS
 		/* Non-root can only save the user namespace. */
 		if (am_root <= 0 && !HAS_PREFIX(name, USER_PREFIX)) {
@@ -702,6 +742,7 @@
 			continue;
 		}
 #endif
+#endif
 		/* No rsync.%FOO attributes are copied w/o 2 -X options. */
 		if (preserve_xattrs < 2 && name_len > RPRE_LEN
 		 && name[RPRE_LEN] == '%' && HAS_PREFIX(name, RSYNC_PREFIX)) {
@@ -841,12 +882,14 @@
 		list_len -= name_len;
 
 #ifdef HAVE_LINUX_XATTRS
+#if 0
 		/* We always ignore the system namespace, and non-root
 		 * ignores everything but the user namespace. */
 		if (user_only ? !HAS_PREFIX(name, USER_PREFIX)
 			      : HAS_PREFIX(name, SYSTEM_PREFIX))
 			continue;
 #endif
+#endif
 		if (am_root < 0 && name_len > RPRE_LEN
 		 && name[RPRE_LEN] == '%' && strcmp(name, XSTAT_ATTR) == 0)
 			continue;
@@ -856,7 +899,7 @@
 				break;
 		}
 		if (i == xalp->count) {
-			if (sys_lremovexattr(fname, name) < 0) {
+			if (sys_lremovexattr(fname, name) < 0 && errno != ENOATTR && errno != ENOTSUP) {
 				rsyserr(FERROR_XFER, errno,
 					"rsync_xal_clear: lremovexattr(\"%s\",\"%s\") failed",
 					fname, name);
